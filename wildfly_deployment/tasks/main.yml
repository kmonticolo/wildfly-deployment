---
# tasks file for instalacja
- name: check VTMS version
  get_url:
    url: '{{ repo_location }}/{{ descriptor_filename }}'
    validate_certs: false
    dest: /tmp/vtms.xml
  changed_when: False

- name: get VTMS version
  uri:
    url: '{{ repo_location }}/{{ descriptor_filename }}'
    method: GET
    body_format: json
    validate_certs: no
    return_content: yes
  register: vtms_version

- name: get URL from XML
  shell: sed -n 's:.*<url>\(.*\)</url>.*:\1:p' < /tmp/vtms.xml
  register: vtms_url
  changed_when: False

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0775
  with_items:
    - /tmp/tms
    - /tmp/prev
    - /tmp/prev/www

- name: unarchive deployment file
  unarchive:
    src: "{{ vtms_url.stdout }}"
    dest: /tmp/tms
    validate_certs: false
    remote_src: yes
    creates: /tmp/tms/VTMS

- name: find war files to backup
  find:
    paths: '{{ jboss_home }}/standalone/deployments' 
    patterns: 'vtms-*.war'
  register: vtms_to_backup

- name: backup current version
  copy: 
    remote_src: True
    src: "{{ item }}" 
    dest: /tmp/prev
  with_items:
    - "{{ vtms_to_backup.files |  map(attribute='path') | list }}"

- name: backup www directory
  shell: /bin/cp -r '{{ www_root }}' /tmp/prev/www
  ignore_errors: true
  
- name: stop wildfly service 
  service: 
    name: wildfly
    state: stopped

- name: ensure file pattern.scss exists
  stat:
    path: /tmp/tms/VTMS/pattern.scss
  register: file

- name: ensure directory standalone/data/TMS/tenant exists
  file:
    path: '{{ jboss_home }}/standalone/data/TMS/tenant/'
    state: directory
    owner: jboss
    group: jboss
    mode: 0775

- name: copy pattern.scss
  command: /bin/cp /tmp/tms/VTMS/pattern.scss '{{ jboss_home }}'/standalone/data/TMS/tenant/
  ignore_errors: true
  #when: file.stat.exists == True

- name: find war files to delete
  find:
    paths: '{{ jboss_home }}/standalone/deployments' 
    patterns: 'vtms-*.war'
  register: vtms_to_delete

- name: remove old deployment
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ vtms_to_delete.files |  map(attribute='path') | list }}"

- name: find war files
  find:
    paths: /tmp/tms/VTMS
    patterns: 'vtms-*.war'
  register: vtms_application

- name: Deploy war files
  copy: 
    remote_src: True
    src: "{{ item }}" 
    dest: "{{ jboss_home }}/standalone/deployments/"
  with_items:
    - "{{ vtms_application.files |  map(attribute='path') | list }}"

- name: Change ownership of JBoss installation
  file:
    path: "'{{ jboss_home }}'/standalone/"
    owner: jboss
    group: jboss
    state: directory
    recurse: yes

- name: remove settings.js
  file:
    path: /tmp/tms/VTMS/web/app/utils/settings.js
    state: absent

- name: remove www_root
  file:
    state: absent
    path: '{{ www_root }}/'

- name: create directories
  file:
    state: directory
    path: "{{ item }}/"
  with_items: 
    - '{{ www_root }}/'
    - '{{ www_root }}/app/utils'
    - '{{ www_root }}/dist/app/utils'
    - /opt/CommunicationModule/lib/

- name: populate www_root
  shell: /bin/cp -r /tmp/tms/VTMS/web/* '{{ www_root }}'/

- name: copy .htaccess
  copy: 
    remote_src: True
    src: /tmp/prev/www/html/.htaccess
    dest: '{{ www_root }}'

- name: copy settings.js
  copy: 
    remote_src: True
    src: /tmp/prev/www/html/app/utils/settings.js
    dest: '{{ www_root }}/app/utils/'

- name: copy settings.js
  copy: 
    remote_src: True
    src: /tmp/prev/www/html/app/utils/settings.js
    dest: '{{ www_root }}/dist/app/utils/'

- name: start wildfly service 
  service: 
    name: wildfly
    enabled: yes
    state: started

- name: ensure ep2_server exists
  stat:
    path: /opt/CommunicationModule/bin/ep2_server
  register: ep2server

- name: find ep2-server.jar 
  find:
    paths: /tmp/tms/VTMS/CommunicationModule/lib/
    patterns: 'ep2-server-*.jar'
  register: ep2_server

- name: copy ep2-server.jar
  copy:
    remote_src: True
    src: "{{ item }}"
    dest: /opt/CommunicationModule/lib/
  with_items:
    - "{{ ep2_server.files |  map(attribute='path') | list }}"

- name: restart ep2-server
  command: /opt/CommunicationModule/bin/ep2_server restart
  when: ep2server.stat.exists == True

- name: save new version to file
  shell: sed -n 's:.*<version>\(.*\)</version>.*:\1:p' < /tmp/vtms.xml > /etc/vtms/vtms.version
  register: vtms_version
